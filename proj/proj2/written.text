Project 2
written.text

Name: Neil Powers
Login ID: npower03


Written #1:  How much time I spent on this assignment
-----------------------------------------------------

Please estimate of the amount of time you spent on this assignment
(each week) in hours, e. g., 6.5 hours.  Be as accurate as you can,
but we know you are not keeping a timer going: just give your best
estimate.

Week 1 time: 4.5 hours
Week 2 time:


Written #2:  How I tested my code
---------------------------------

Week 1 testing:

******************* wordfreq0.cpp *******************
This program was fairly simple to make after I figured out what it
was supposed to do. I had to get a word, see if it started with a
letter, then convert it to lowercase and print it if so. The helper
functions to determine if it was a word and to convert it to lowercase
were very easy. To test test them, I hardcoded words into main (e.g. 
"Hello", "@Hello", "hEllo", etc.) and made sure the outputs were
correct. To make it read from a file, I simply made it loop through
every word. I tested this final function by using diff to compare the
output of written.text to the given .out file.

*************** WordFreqLinkedList.cpp ***************
Like wordfreq0.cpp, I tested this file by iteravely making each
function. I started by making the essential and simple functions,
such as the initializer or size. I tested these functions by hardcoding
nodes into the linked list via the countOccurances function. Once
everything was working, I started on count occurances (which was by far)
the hardest function to make. Initially, I tried having a single loop
that would check for already present words, and add the word to the list
if it didn't yet exist, but this didn't work 100% of the time. I added
debug prints in the loop, and discovered the part that added new words
was 'ahead' a node despice coming after the part that incremented counts,
So I knew I had make sure I incremented words first. To fix this,
I added extra cases for the head node (if its null or 'after' the given)
word. This fixed some cases, but I still had repeating words instead of
incrementing them. I figured this was because this part was 'ahead' a
node, so I split the loop in two... which worked when I added and printed
words.

I know if can be improved so that you only have to loop through the
list once, but I could't figure out how to optimize my function like
this.

Week 2 testing:



Written #3:  Timing
-------------------
(You will do this in week 2.  Leave it blank in week 1.)

Use the "/usr/bin/time -p" command as shown in the assignment.  You
may use some novels I downloaded from Project Gutenberg and placed in
/comp/11/files/novels.

Run both versions of your program (wordfreq1 and wordfreq2) on
AliceInWonderland.txt and two other reasonably large files of your
choice.  If you choose something that isn't one of the novels, tell us
what the file was and how big it is.  E. g., show the output of the
"wc" program on it ("wc" will count lines, "words," and characters in
the file).

Take the "user" times and enter them in the table below for
AlicInWonderland.txt and your two other files.


              AliceInWonderLand    YouPick    YouPick
wordfreq1
wordfreq2
