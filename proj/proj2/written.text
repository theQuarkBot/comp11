Project 2
written.text

Name: Neil Powers
Login ID: npower03


Written #1:  How much time I spent on this assignment
-----------------------------------------------------

Please estimate of the amount of time you spent on this assignment
(each week) in hours, e. g., 6.5 hours.  Be as accurate as you can,
but we know you are not keeping a timer going: just give your best
estimate.

Week 1 time: 4.5 hours
Week 2 time: 4 hours


Written #2:  How I tested my code
---------------------------------

Week 1 testing:

******************* wordfreq0.cpp *******************
This program was fairly simple to make after I figured out what it
was supposed to do. I had to get a word, see if it started with a
letter, then convert it to lowercase and print it if so. The helper
functions to determine if it was a word and to convert it to lowercase
were very easy. To test test them, I hardcoded words into main (e.g. 
"Hello", "@Hello", "hEllo", etc.) and made sure the outputs were
correct. To make it read from a file, I simply made it loop through
every word. I tested this final function by using diff to compare the
output of written.text to the given .out file.

*************** WordFreqLinkedList.cpp ***************
Like wordfreq0.cpp, I tested this file by iteravely making each
function. I started by making the essential and simple functions,
such as the initializer or size. I tested these functions by hardcoding
nodes into the linked list via the countOccurances function. Once
everything was working, I started on count occurances (which was by far)
the hardest function to make. Initially, I tried having a single loop
that would check for already present words, and add the word to the list
if it didn't yet exist, but this didn't work 100% of the time. I added
debug prints in the loop, and discovered the part that added new words
was 'ahead' a node despice coming after the part that incremented counts,
So I knew I had make sure I incremented words first. To fix this,
I added extra cases for the head node (if its null or 'after' the given)
word. This fixed some cases, but I still had repeating words instead of
incrementing them. I figured this was because this part was 'ahead' a
node, so I split the loop in two... which worked when I added and printed
words.

I know if can be improved so that you only have to loop through the
list once, but I could't figure out how to optimize my function like
this.

Week 2 testing:
I started this week by implementing wordfreq.cpp. I knew I needed a function
to check if a word is a string, and another function to make it lowercase,
so I copied those functions into wordfreq.cpp from wordfreq0.cpp. I knew they
both worked from last week. Next, I made a runner function called wordLoop,
which declared a WordFreqList and a word. Then I made a loop in this function
that would take cin inputs until cin.fail(), and add each of these inputs
to my list if they both worked. I checked to make sure this compiled. Next, I
made a print function what would go through the list and print the freq and
word of each node by using the get() function. After all of this, I attempted
to run the funciton. Unfortunately, this didn't work because I could not pass
the WordFreqList as a variable (bc is uses the heap). To fix this, I passed my
list as a pointer, allowing me to save time. Once working, I diffed the outputs
to correct outputs to verify my work.

When making BinnedWordFreqList.cpp, I made the simple functions first. these
included size() and countOccurances(). For the former, I simply added the size
of each bin and returned that (no testing this yet). For countOccurances,
I simply added it to the bin at (word[0] - 'a'), and did the regular
countOccurances function from there. For the get() function, I first checked
if the index was within bounds. If it was, I went through each bin until the
max index in that bin exceeded my index. If it did, I found the node from that
bin. I tested this by running it with literally every file possible. I also
added a print statement in wordfreq.cpp that kept track of which word I was
adding to get visual feedback on where I was.

Written #3:  Timing
-------------------
(You will do this in week 2.  Leave it blank in week 1.)

Use the "/usr/bin/time -p" command as shown in the assignment.  You
may use some novels I downloaded from Project Gutenberg and placed in
/comp/11/files/novels.

Run both versions of your program (wordfreq1 and wordfreq2) on
AliceInWonderland.txt and two other reasonably large files of your
choice.  If you choose something that isn't one of the novels, tell us
what the file was and how big it is.  E. g., show the output of the
"wc" program on it ("wc" will count lines, "words," and characters in
the file).

Take the "user" times and enter them in the table below for
AlicInWonderland.txt and your two other files.


              AliceInWonderLand     words10000  words40000  words
wordfreq1       0.92                2.02        33.20       630.41
wordfreq2       0.06                2.01        9.62        35.99

Note: when testing words.text, I printed my index (which word I was one)
      for every iteration of the loop in wordfreq.cpp. I thid this because
      I wanted a visual indicator of progress.

I beliebe for words10000, the file was not large enough
for any optimizations to significantly affect the performance of the program.
When I ran words40000 the unoptimized version was much slower because it
had to increment through all the nodes each time.
